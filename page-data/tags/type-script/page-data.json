{"componentChunkName":"component---src-templates-tag-page-tsx","path":"/tags/type-script/","result":{"data":{"site":{"siteMetadata":{"title":"あのぞんブログ","author":"anozon"}},"pages":{"totalCount":16,"edges":[{"node":{"excerpt":"はコンテナに合わせてテキストのフォントサイズをフィットしてくれるライブラリです。 rikschennink/fitty: ✨ Makes text fit perfectly それを React で使うための hooks を書いた。 Gist fitty for react…","fields":{"slug":"fitty-in-react"},"frontmatter":{"date":"2021-06-14","title":"fitty を React で使う useFitty hook"}}},{"node":{"excerpt":"css animation の  や  などのキーワードに対して  のエラーが出たので対処しました。  で animation を扱う場合以下のように書きます。 () この  や  に VS Code…","fields":{"slug":"keyframes-ts-styled-plugin"},"frontmatter":{"date":"2021-05-19","title":"styled-components の keyframes で ts-styled-plugin のエラーが出る"}}},{"node":{"excerpt":"React で特定の props を固定した特化コンポーネントを定義する方法をいくつかまとめました。 そのまま生の React で書く recompose/defaultProps を使う方法 styled-components を使う方法 DEMO です。\nreact-set…","fields":{"slug":"react-set-props"},"frontmatter":{"date":"2021-01-19","title":"React で特定の props を固定した特化コンポーネントを定義する"}}},{"node":{"excerpt":"この記事では アロー関数で Type Guard について紹介します。 TypeScript: TS Playground - An online editor for exploring TypeScript and JavaScript function パターン arrow…","fields":{"slug":"type-guard-arrow-function"},"frontmatter":{"date":"2021-01-04","title":"アロー関数とfunction それぞれの Type Guard 書き方"}}},{"node":{"excerpt":"props で指定された URL が変わったら フェードアウト し、 新しい URL 画像で フェードイン しながら表示するコンポーネントを作りました。\n を使います。 デモ コード 呼び出す側のコード DiceBear Avatars…","fields":{"slug":"react-transition-props-bg"},"frontmatter":{"date":"2020-12-29","title":"React で URL props が変わったら fade アニメーションで 背景を変える"}}},{"node":{"excerpt":"js で配列の 2 行目以降のみをソートする方法のメモです。 repl: https://repl.it/@anozon/sortbody#index.ts ソート対象の配列 先頭以外をソートする n 行目以降のみソートする Lodash…","fields":{"slug":"sort-without-head"},"frontmatter":{"date":"2020-12-17","title":"js で先頭以外(n行目以降)をソートする"}}},{"node":{"excerpt":"を実行した時のタイムスタンプをレンダリングしたいときの方法です。 jsx 上で  などとするとクライアントサイドでレンダリングされた時間が表示されてしまいます。 SSR 時のデータを React で使いたい場合は NextPage…","fields":{"slug":"next-initial-props-timestmap"},"frontmatter":{"date":"2020-11-17","title":"Next.js export 実行時のタイムスタンプをコンポーネントで使う"}}},{"node":{"excerpt":"メモリ付きの定規、ルーラーコンポーネントのサンプルです。 react-memory-component コード ruler-with-memory - CodeSandbox ミソ ブロック部分とメモリ部分を 0.…","fields":{"slug":"react-memory-ruler"},"frontmatter":{"date":"2020-10-30","title":"React と display grid でメモリ付き定規"}}},{"node":{"excerpt":"アプリ 絵文字対応 カウントする関数 エスケープ文字の可視化 アプリ 文字頻度カウント(絵文字対応)\nemoji-count 絵文字対応  では絵文字が 1 文字として分割できません。  を使います。 bestiejs/punycode.js: A robust Punycode…","fields":{"slug":"emoji-moji-count"},"frontmatter":{"date":"2020-10-02","title":"絵文字を含めて文字数カウントするWebアプリ作った"}}},{"node":{"excerpt":"TypeScript の UnionType は以下のように定義できます。 Python の type でも同じようなことができるのか調べました。\nちなみに  というのがありますが別です。 typeing.Literal を使う ちなみに get_args…","fields":{"slug":"python-typing-literal"},"frontmatter":{"date":"2020-08-24","title":"Python で TypeScript の UnionType を使う"}}},{"node":{"excerpt":"この記事では React (と TypeScript で) canvas から画像生成する方法を紹介します。\n文字描画や色変更をサンプルに説明していきます。 React で Canvas を使うベースのコード 文字色や背景色を変えるサンプル React で Canvas…","fields":{"slug":"react-canvas-to-img"},"frontmatter":{"date":"2020-05-25","title":"React で canvas から画像生成する最小コード"}}},{"node":{"excerpt":"この記事では Next.js with TypeScript で最小限の _app.tsx, _document.tsx について紹介します。 Gist: Next.js with typescript minimum pages/_document.tsx, pages…","fields":{"slug":"ts-nextjs-pages"},"frontmatter":{"date":"2020-02-08","title":"Next.js with TypeScript で最小限の _app.tsx, _document.tsx"}}},{"node":{"excerpt":"この記事では children を持つ Component を function で書くときの型定義する方法を説明します。 書き方  を使うことで書けます。 Sample PropsWithChildren - CodeSandbox それぞれの書き方 関連 Tips Props…","fields":{"slug":"react-fc-with-function"},"frontmatter":{"date":"2020-02-07","title":"children を持つ Component を normal function で書くときの型定義"}}},{"node":{"excerpt":"この記事では Clasp を使って GoogleAppScript のコードを手元で管理する方法を紹介します。 Clasp Command Line Interface using clasp | Google Developers 手順…","fields":{"slug":"clasp-intro"},"frontmatter":{"date":"2020-01-21","title":"【Clasp】GoogleAppScript のコードをローカルで開発する"}}},{"node":{"excerpt":"経年劣化に耐える ReactComponent の書き方 - Qiita\nが良さそうだったので TypeScript で書く場合を試してみた。 コード CodeSandbox 気になる部分 StyledComponent で既存 Component を Wrap…","fields":{"slug":"layer-react-counterapp"},"frontmatter":{"date":"2020-01-21","title":"5層 ReactComponent と TypeScript でカウンター書いてみる"}}},{"node":{"excerpt":"GatsbyJS で書いているこのブログを Typescript 移行しました。 主に以下の記事を参考に移行しました。なので今回は Type づけに焦点を当てて書きます。 Gatsby.js を完全 TypeScript 化する - Qiita GraphQL Data…","fields":{"slug":"gatsby-to-typescript"},"frontmatter":{"date":"2020-01-09","title":"GatsbyJS を Typescript に移行した際の Type 付け"}}}]}},"pageContext":{"tag":"TypeScript","limit":50,"skip":0,"numPages":1,"currentPage":1}},"staticQueryHashes":["1855083372","2529228376","3070792728"]}