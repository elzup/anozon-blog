{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/habitica-api-sample","result":{"data":{"site":{"siteMetadata":{"title":"あのぞんブログ","author":"anozon","siteUrl":"https://blog.anozon.me"}},"markdownRemark":{"id":"1582cfdb-abb3-526d-8201-ded6c36a7ab4","excerpt":"この記事では Habitica API で日課の記録を取得する方法について紹介します。 Habitica は日課管理ツールです。 Habitica - Gamify Your Life token を取得する node.js で API を叩く 中身を確認する 日課を達成した日付一覧を出力してみる おわりに token…","html":"<p>この記事では Habitica API で日課の記録を取得する方法について紹介します。</p>\n<p>Habitica は日課管理ツールです。</p>\n<p><a href=\"https://habitica.com/\">Habitica - Gamify Your Life</a></p>\n<div class=\"toc\">\n<ul>\n<li><a href=\"#token-%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B\">token を取得する</a></li>\n<li><a href=\"#nodejs-%E3%81%A7-api-%E3%82%92%E5%8F%A9%E3%81%8F\">node.js で API を叩く</a></li>\n<li><a href=\"#%E4%B8%AD%E8%BA%AB%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B\">中身を確認する</a></li>\n<li><a href=\"#%E6%97%A5%E8%AA%B2%E3%82%92%E9%81%94%E6%88%90%E3%81%97%E3%81%9F%E6%97%A5%E4%BB%98%E4%B8%80%E8%A6%A7%E3%82%92%E5%87%BA%E5%8A%9B%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">日課を達成した日付一覧を出力してみる</a></li>\n<li><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\">おわりに</a></li>\n</ul>\n</div>\n<h2 id=\"token-を取得する\">token を取得する</h2>\n<p><img src=\"https://elzup-image-storage.s3.amazonaws.com/blog/Habitica_-_Gamify_Your_Life.png\"></p>\n<h2 id=\"nodejs-で-api-を叩く\">node.js で API を叩く</h2>\n<p><a href=\"https://github.com/axios/axios\">axios</a> で叩いてみます。\nとりあえずレスポンス全体を出力します。</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>\"main.js\"</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> axios <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'axios'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>default\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">HABITICA_USER_ID</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">HABITICA_TOKEN</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env\n\n<span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  baseURL<span class=\"token operator\">:</span> <span class=\"token string\">'https://habitica.com'</span><span class=\"token punctuation\">,</span>\n  headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    Accept<span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'x-api-user'</span><span class=\"token operator\">:</span> <span class=\"token constant\">HABITICA_USER_ID</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'x-api-key'</span><span class=\"token operator\">:</span> <span class=\"token constant\">HABITICA_TOKEN</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'x-client'</span><span class=\"token operator\">:</span> <span class=\"token constant\">HABITICA_USER_ID</span> <span class=\"token operator\">+</span> <span class=\"token string\">'-node'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">main</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/v3/tasks/user'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// all data</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"中身を確認する\">中身を確認する</h2>\n<p>出力された json の構造を確認してみます。</p>\n<p><code class=\"language-text\">fx</code> という JSON 解析 cli ツールを使っていておすすめです。jq の filter も使えます。\n<a href=\"https://github.com/antonmedv/fx\">antonmedv/fx: Command-line tool and terminal JSON viewer 🔥</a></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">node main.js | fx</code></pre></div>\n<p>取り出したい日課 <code class=\"language-text\">/筋トレ</code> で検索します。</p>\n<p><img src=\"https://elzup-image-storage.s3.amazonaws.com/blog/fx.png\"></p>\n<p>データ構造を確認すると “name” と “history” がありますね。</p>\n<h2 id=\"日課を達成した日付一覧を出力してみる\">日課を達成した日付一覧を出力してみる</h2>\n<p>‘YYYY-MM-DD’ の形式で出力してみます。</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>\"main.js\"</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> format <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fecha'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> tasks <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>data\n<span class=\"token keyword\">const</span> workout <span class=\"token operator\">=</span> tasks<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=></span> <span class=\"token regex\">/筋トレ/</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> times <span class=\"token operator\">=</span> workout<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">commit</span> <span class=\"token operator\">=></span> <span class=\"token function\">format</span><span class=\"token punctuation\">(</span>commit<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">,</span> <span class=\"token string\">'YYYY-MM-DD'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 後日 commit のタイムスタンプ</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>times<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node main.js\n\n<span class=\"token number\">2020</span>-02-19\n<span class=\"token number\">2020</span>-02-20\n<span class=\"token number\">2020</span>-02-21\n<span class=\"token number\">2020</span>-02-22 //\n<span class=\"token number\">2020</span>-02-22 // ←翌日のリマインドでチェックした場合かぶってします\n<span class=\"token number\">2020</span>-02-23\n<span class=\"token number\">2020</span>-02-24\n<span class=\"token number\">2020</span>-02-25\n<span class=\"token number\">2020</span>-02-26\n<span class=\"token number\">2020</span>-02-29\n<span class=\"token number\">2020</span>-03-01</code></pre></div>\n<p>ということでかぶった場合は前日にするパッチを当てます。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> times <span class=\"token operator\">=</span> workout<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">commit</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>\n  <span class=\"token function\">format</span><span class=\"token punctuation\">(</span>commit<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">,</span> <span class=\"token string\">'YYYY-MM-DD'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  commit<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ntimes<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> prev <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n<span class=\"token keyword\">const</span> strs <span class=\"token operator\">=</span> times<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 一致する場合は前日に</span>\n  <span class=\"token keyword\">const</span> ts <span class=\"token operator\">=</span> s <span class=\"token operator\">===</span> prev <span class=\"token operator\">?</span> <span class=\"token function\">format</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">-</span> <span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'YYYY-MM-DD'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> s\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>prev <span class=\"token operator\">=</span> ts<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nstrs<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">2020-02-19\n2020-02-20\n2020-02-21\n2020-02-22\n2020-02-23\n2020-02-24\n2020-02-25\n2020-02-26\n2020-02-29\n2020-03-01</code></pre></div>\n<p>かぶらなくなりました。\nただし以下のようなパターンの場合は確証がありません。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">History なし      // こちらの日に実行した可能性あり\nHistory あり\nHistory なし</code></pre></div>\n<p>コード: <a href=\"https://github.com/elzup-sandbox/habitica-api-node-sample/blob/master/main.js\">https://github.com/elzup-sandbox/habitica-api-node-sample/blob/master/main.js</a></p>\n<h2 id=\"おわりに\">おわりに</h2>\n<p>Habitica の API を使うことで、 「ボタン 1 つでタイムスタンプを記録する」 というツールとしても今後使えそうだなと思いました。</p>","frontmatter":{"title":"javascript で Habitica API を使って日課の記録を取得する","date":"2020-03-01","tags":["Habitica API","Node.js","json","fx"]}}},"pageContext":{"slug":"habitica-api-sample","previous":{"excerpt":"JavaScript で ソースコード自身を出力するソースコード書いてみました。Qunie…","fields":{"slug":"javascript-own-print"},"frontmatter":{"title":"【JavaScriptクワイン】プログラムと同じ文字列を出力するプログラム書いた"}},"next":{"excerpt":"プロジェクトごとに VSCode の色を変える方法を見つけて最近利用しています。\nしかし毎回設定するのは面倒くさいので manifest.json からテーマカラーを読み出して\n設定する cli を作りました。 vscode-workcolor-setup  や  の theme…","fields":{"slug":"vscode-project-color"},"frontmatter":{"title":"manifest.json から VSCode でプロジェクトごとに色をつける"}}}},"staticQueryHashes":["1855083372","3070792728","4156694545"]}