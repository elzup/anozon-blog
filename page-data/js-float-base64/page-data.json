{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/js-float-base64","result":{"data":{"site":{"siteMetadata":{"title":"あのぞんブログ","author":"anozon","siteUrl":"https://blog.anozon.me"}},"markdownRemark":{"id":"b05f0135-0fc7-5210-9be0-814dfdb851c9","excerpt":"JavaScript で Buffer と他の型への変換する方法をまとめました。 数値 → Buffer Buffer → 数値 文字列 ↔ Buffer 他のエンコーディング ↔ Buffer 他の数値型について 変換例 範囲を間違えると別の値になる repl も公開しています。\nRepl.it - buffer…","html":"<p>JavaScript で Buffer と他の型への変換する方法をまとめました。</p>\n<div class=\"toc\">\n<ul>\n<li><a href=\"#%E6%95%B0%E5%80%A4-%E2%86%92-buffer\">数値 → Buffer</a></li>\n<li><a href=\"#buffer-%E2%86%92-%E6%95%B0%E5%80%A4\">Buffer → 数値</a></li>\n<li><a href=\"#%E6%96%87%E5%AD%97%E5%88%97--buffer\">文字列 ↔ Buffer</a></li>\n<li><a href=\"#%E4%BB%96%E3%81%AE%E3%82%A8%E3%83%B3%E3%82%B3%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0--buffer\">他のエンコーディング ↔ Buffer</a></li>\n<li><a href=\"#%E4%BB%96%E3%81%AE%E6%95%B0%E5%80%A4%E5%9E%8B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">他の数値型について</a></li>\n<li>\n<p><a href=\"#%E5%A4%89%E6%8F%9B%E4%BE%8B\">変換例</a></p>\n<ul>\n<li><a href=\"#%E7%AF%84%E5%9B%B2%E3%82%92%E9%96%93%E9%81%95%E3%81%88%E3%82%8B%E3%81%A8%E5%88%A5%E3%81%AE%E5%80%A4%E3%81%AB%E3%81%AA%E3%82%8B\">範囲を間違えると別の値になる</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<p>repl も公開しています。\n<a href=\"https://repl.it/@anozon/buffer#index.js\">Repl.it - buffer</a></p>\n<h2 id=\"数値-→-buffer\">数値 → Buffer</h2>\n<p>数値は <strong>→ 型付き配列 → Buffer</strong> という順に変換する。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// int → Buffer</span>\n<span class=\"token keyword\">const</span> intBuf <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">120</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// float → Buffer</span>\n<span class=\"token keyword\">const</span> floatBuf <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Float32Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1.23</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// double → Buffer</span>\n<span class=\"token keyword\">const</span> doubleBuf <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Float64Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1.2345</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"buffer-→-数値\">Buffer → 数値</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Buffer → int</span>\n<span class=\"token keyword\">const</span> int <span class=\"token operator\">=</span> intBuf<span class=\"token punctuation\">.</span><span class=\"token function\">readInt8</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Buffer → float</span>\n<span class=\"token keyword\">const</span> float <span class=\"token operator\">=</span> floatBuf<span class=\"token punctuation\">.</span><span class=\"token function\">readFloatLE</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Buffer → double</span>\n<span class=\"token keyword\">const</span> double <span class=\"token operator\">=</span> doubleBuf<span class=\"token punctuation\">.</span><span class=\"token function\">readDoubleLE</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// { int: 120, float: 1.2300000190734863, double: 1.2345 }</span></code></pre></div>\n<h2 id=\"文字列--buffer\">文字列 ↔ Buffer</h2>\n<p>一番シンプル。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// string → Buffer</span>\n<span class=\"token keyword\">const</span> strBuf <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'かぼちゃ'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// &lt;Buffer e3 81 8b e3 81 bc e3 81 a1 e3 82 83></span>\n\n<span class=\"token comment\">// string → Buffer</span>\nstrBuf<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// かぼちゃ</span></code></pre></div>\n<h2 id=\"他のエンコーディング--buffer\">他のエンコーディング ↔ Buffer</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// かぼちゃ Buffer → 各エンコード</span>\n\nstrBuf<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hex'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// e3818be381bce381a1e38283</span>\nstrBuf<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'base64'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 44GL44G844Gh44KD</span>\nstrBuf<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// かぼちゃ</span>\nstrBuf<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'utf16le'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 臣벁臣莂</span>\n\n<span class=\"token comment\">// 各エンコード → Buffer</span>\nBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'e3818be381bce381a1e38283'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hex'</span><span class=\"token punctuation\">)</span>\nBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'44GL44G844Gh44KD'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'base64'</span><span class=\"token punctuation\">)</span>\nBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'かぼちゃ'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span>\nBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'臣벁臣莂'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf16le'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// &lt;Buffer e3 81 8b e3 81 bc e3 81 a1 e3 82 83></span></code></pre></div>\n<h2 id=\"他の数値型について\">他の数値型について</h2>\n<p>例に上げた <code class=\"language-text\">Uint8</code> や <code class=\"language-text\">Float32</code> の他にも種類があり、“サイズ(バイト数)”, “符号の有無” により複数あります。\n適したものを使いましょう。</p>\n<p>from buffer\n<a href=\"https://nodejs.org/api/buffer.html\">Buffer | Node.js v15.0.1 Documentation</a></p>\n<p>to buffer\n<a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Typed_arrays\">JavaScript 型付き配列 - JavaScript | MDN</a></p>\n<h2 id=\"変換例\">変換例</h2>\n<p>base64 エンコード文字を Dobule 型に戻す例。\n(base64 ↔ Buffer ↔ Double)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Float64Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">321.123</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'base64'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 'hxbZzvcRdEA='</span>\nBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hxbZzvcRdEA='</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'base64'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readDoubleLE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 321.123</span></code></pre></div>\n<p>hex エンコードを int に戻す。\n(hex ↔ Buffer ↔ int)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Int32Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">20201010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hex'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// '323e3401'</span>\nBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'323e3401'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hex'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readInt32LE</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 20201010</span></code></pre></div>\n<h3 id=\"範囲を間違えると別の値になる\">範囲を間違えると別の値になる</h3>\n<p>当然ですが書き込んだ形式と別の読み出し型をすると別の値になっていまします。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> b1 <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint32Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1234</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">)</span>\nb1<span class=\"token punctuation\">.</span><span class=\"token function\">readInt32LE</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// o 1234</span>\nb1<span class=\"token punctuation\">.</span><span class=\"token function\">readInt32BE</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// x -771489792 エンディアン間違い</span>\nb1<span class=\"token punctuation\">.</span><span class=\"token function\">readInt8</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// x -46 Byte長 間違い</span></code></pre></div>\n<p>変換時の値の範囲が間違えていても同様です。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> b2 <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 範囲ミス Unsigned なのにマイナス</span>\nb2<span class=\"token punctuation\">.</span><span class=\"token function\">readUInt8</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// x 246</span>\n\n<span class=\"token keyword\">const</span> b3 <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint16Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">65536</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 範囲ミス 65535 より大きい値</span>\nb3<span class=\"token punctuation\">.</span><span class=\"token function\">readUInt16LE</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// x 0</span></code></pre></div>","frontmatter":{"title":"Buffer と float、整数、他エンコードとの相互変換【Javascript】","date":"2020-11-01","tags":["JavaScript","Binary","Buffer"]}}},"pageContext":{"slug":"js-float-base64","previous":{"excerpt":"恐らく visual mode で選択した範囲がコピーされています。 clipboard に  が設定されているときの挙動です。 設定","fields":{"slug":"vim-cannot-paste"},"frontmatter":{"title":"vim の visual mode で選択した範囲に paste できないとき"}},"next":{"excerpt":"java で標準出力を一時的にオフにする方法です。 Repl.it - StdOutToNull コード  で “デフォルトの出力” と “何もしない OutputStream” を切り替えています。 snippet Snippet 部分のみコード。","fields":{"slug":"java-stdout-null"},"frontmatter":{"title":"java で標準出力を一旦オフにする"}}}},"staticQueryHashes":["1855083372","3070792728","4156694545"]}