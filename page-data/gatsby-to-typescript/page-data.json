{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/gatsby-to-typescript","result":{"data":{"site":{"siteMetadata":{"title":"あのぞんブログ","author":"anozon","siteUrl":"https://blog.anozon.me"}},"markdownRemark":{"id":"5f1f2736-74bd-5634-ac44-05c3a1eb9d02","excerpt":"GatsbyJS で書いているこのブログを Typescript 移行しました。 主に以下の記事を参考に移行しました。なので今回は Type づけに焦点を当てて書きます。 Gatsby.js を完全 TypeScript 化する - Qiita GraphQL Data, Page Component…","html":"<p>GatsbyJS で書いているこのブログを Typescript 移行しました。</p>\n<p>主に以下の記事を参考に移行しました。なので今回は Type づけに焦点を当てて書きます。</p>\n<p><a href=\"https://qiita.com/Takepepe/items/144209f860fbe4d5e9bb\">Gatsby.js を完全 TypeScript 化する - Qiita</a></p>\n<h2 id=\"graphql-data-page-component-に型をつける\" style=\"position:relative;\">GraphQL Data, Page Component に型をつける</h2>\n<p><code class=\"language-text\">gatsby-plugin-graphql-codegen</code> を使用する方法と <code class=\"language-text\">@graphql-codegen/typescript</code> を使用する方法がありましたが前者を選びました。セットアップが簡潔に済んだので。</p>\n<h3 id=\"pagequery\" style=\"position:relative;\">PageQuery</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> IndexPageQuery <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../../types/graphql-types.d'</span>\n\ntype Props <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  data<span class=\"token operator\">:</span> IndexPageQuery\n  location<span class=\"token operator\">:</span> Location\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> bioQuery <span class=\"token operator\">=</span> graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  query IndexPage {\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<h3 id=\"staticquery\" style=\"position:relative;\">StaticQuery</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> BioDataQuery <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../../types/graphql-types.d'</span>\n\n    <span class=\"token operator\">&lt;</span>StaticQuery\n      query<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>bioQuery<span class=\"token punctuation\">}</span>\n      render<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token operator\">:</span> BioDataQuery</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></code></pre></div>\n<h3 id=\"その他-props\" style=\"position:relative;\">その他 Props</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> SitePageContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../../types/graphql-types.d'</span>\n\nlocation<span class=\"token operator\">:</span> Location\npageContext<span class=\"token operator\">:</span> SitePageContext</code></pre></div>\n<h2 id=\"感想\" style=\"position:relative;\">感想</h2>\n<p>TypeScript を入れるとビルド周りで複雑になるフレームワークが多くて不安でしたが、あっさりと移行できてよかったです。</p>","frontmatter":{"title":"GatsbyJS を Typescript に移行した際の Type 付け","date":"2020-01-09","tags":["GatsbyJS","TypeScript","GraphQL"]}}},"pageContext":{"slug":"gatsby-to-typescript","previous":{"excerpt":"Firebase Function から Cloud Messaging (FCM HTTP v1 API) を使って通知を送る方法のメモです。  の初期化設定する アプリサーバーからの送信リクエストを作成する  |  Firebase…","fields":{"slug":"firebase-messaging-by-function"},"frontmatter":{"title":"Firebase Function 内から Cloud Messaging で通知を投げる最小コード"}},"next":{"excerpt":"この記事では PLOP について紹介します。\nGatsbyJS で書いている当ブログの記事作成を例に話します。 Consistency Made Simple : PLOP 手順 1. インストール npm で global…","fields":{"slug":"gatsby-plop-newpost"},"frontmatter":{"title":"【PLOP CLI】新しいファイルをテンプレートから生成するCLI"}}}},"staticQueryHashes":["1855083372","3070792728","4156694545"]}