{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/react-multiple-ref-to-one-component","result":{"data":{"site":{"siteMetadata":{"title":"あのぞんブログ","author":"anozon","siteUrl":"https://blog.anozon.me"}},"markdownRemark":{"id":"f1bd7378-59c6-5d33-adc1-96c9815bb6b8","excerpt":"同じ div に  と  の両方を使いたいとがあった。 しかしどちらも ref を渡さなければいけなかったのでその方法です。 Share ref with multiple ref handlers · Issue #13029 · facebook/react useCombinedRefs ref…","html":"<p>同じ div に <code class=\"language-text\">useSize</code> と <code class=\"language-text\">useHover</code> の両方を使いたいとがあった。<br>\nしかしどちらも ref を渡さなければいけなかったのでその方法です。</p>\n<p><a href=\"https://github.com/facebook/react/issues/13029\">Share ref with multiple ref handlers · Issue #13029 · facebook/react</a></p>\n<h2 id=\"usecombinedrefs\">useCombinedRefs</h2>\n<p>ref を合成する関数を用意する。</p>\n<p>参考: <a href=\"https://github.com/facebook/react/issues/13029#issuecomment-497641073\">https://github.com/facebook/react/issues/13029#issuecomment-497641073</a></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useCombinedRefs <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">any</span></span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">...</span>refs<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>Ref<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">>></span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Ref<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span>\n  <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span>element<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      refs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ref<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Ref can have two types - a function or an object. We treat each case.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> ref <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// As per https://github.com/facebook/react/issues/13029</span>\n        <span class=\"token comment\">// it should be fine to set current this way.</span>\n        <span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span>ref <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> element\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    refs\n  <span class=\"token punctuation\">)</span></code></pre></div>\n<p>デモ\n<a href=\"https://codesandbox.io/s/misty-night-n6f8n?file=/src/App.tsx\">misty-night-n6f8n - CodeSandbox</a></p>\n<h2 id=\"その他\">その他</h2>\n<p>とはいえライブラリの hook は ref を引数に渡す形が増えているので combineRefs は不要になりそうです。<br>\nカスタム hook を作るときはそうするのが親切ですね。</p>","frontmatter":{"title":"React で複数の ref を 1つのコンポーネントにセットする","date":"2021-07-09","tags":["React hooks","TypeScript"]}}},"pageContext":{"slug":"react-multiple-ref-to-one-component","previous":{"excerpt":"CSR (Client side rendering) でユーザの public ip を取得する方法です。 ipify を使う ipify - A Simple Public IP Address API React hooks の例 Code: tools/global-ip…","fields":{"slug":"csr-get-public-ip"},"frontmatter":{"title":"CSR (ブラウザ側)で public ip を取得する"}},"next":{"excerpt":"VS Code のテーマを変えました。\nCyberpunk 2077 rebuild - Visual Studio Marketplace…","fields":{"slug":"vscode-window-color-customize"},"frontmatter":{"title":"(プロジェクト毎に) VS Code の Window に色をつける"}}}},"staticQueryHashes":["1855083372","2529228376","3070792728"]}