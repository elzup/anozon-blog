{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/gatsby-codebrock","result":{"data":{"site":{"id":"Site","siteMetadata":{"title":"あのぞんブログ","author":"anozon","siteUrl":"https://blog.anozon.me"}},"markdownRemark":{"id":"1e2fc3cc-31c0-5d4c-909a-6015e71927e2","excerpt":"この記事では GatsbyJS で作っているブログのコードブロックをカスタマイズします。\n現状 Plain Text なので Syntax Hilight と style 調整をします。 手順 1. prismjs のプラグインを追加 gatsby-remark-prismjs と\ngatsby-remark…","html":"<p>この記事では GatsbyJS で作っているブログのコードブロックをカスタマイズします。\n現状 Plain Text なので Syntax Hilight と style 調整をします。</p>\n<h2 id=\"手順-1-prismjs-のプラグインを追加\" style=\"position:relative;\">手順 1. prismjs のプラグインを追加</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> gatsby-transformer-remark gatsby-remark-prismjs prismjs\n<span class=\"token function\">yarn</span> <span class=\"token function\">add</span> gatsby-remark-prismjs-title</code></pre></div>\n<p><a href=\"https://www.gatsbyjs.org/packages/gatsby-remark-prismjs/?=prismjs\">gatsby-remark-prismjs</a> と\n<a href=\"https://www.gatsbyjs.org/packages/gatsby-remark-prismjs-title/\">gatsby-remark-prismjs-title</a>を追加します。</p>\n<h2 id=\"手順-2-config-の追加\" style=\"position:relative;\">手順 2. config の追加</h2>\n<p><code class=\"language-text\">/gatsby-config.js</code> に config を追加します。\n<strong>root の plugins に書くのではなく、 <code class=\"language-text\">gatsby-transformer-remark</code> 以下の plugins へ書くことに注意します。</strong></p>\n\n        <div class=\"gatsby-code-title\">\n          <span>gatsby-config.js</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token unchanged\">    {\n      resolve: `gatsby-transformer-remark`,\n      options: {\n        plugins: [\n</span><span class=\"token inserted-sign inserted\">+          'gatsby-remark-prismjs-title',\n+          {\n+            resolve: `gatsby-remark-prismjs`,\n+            options: {\n+              classPrefix: 'language-',\n+              inlineCodeMarker: null,\n+              aliases: {\n+                js: 'javascript',\n+                sh: 'bash',\n+              },\n+              showLineNumbers: false,\n+              noInlineHighlight: false,\n+              languageExtensions: [\n+                {\n+                  language: 'superscript',\n+                  extend: 'javascript',\n+                  definition: { superscript_types: /(SuperType)/ },\n+                  insertBefore: {\n+                    function: { superscript_keywords: /(superif|superelse)/ },\n+                  },\n+                },\n+              ],\n+              prompt: { user: 'root', host: 'localhost', global: false },\n+              escapeEntities: {},\n+            },\n+          },\n</span><span class=\"token unchanged\">        ]\n      }</span></code></pre></div>\n<p>aliases を使うことで <code class=\"language-text\">js</code> と短くことができます。</p>\n<p>更にそれぞれの readme にあるように sample の style を書くことで\n以下のような感じになりました。</p>\n<p><img src=\"https://elzup-image-storage.s3-ap-northeast-1.amazonaws.com/blog/codebrock.png\" alt=\"anozon blog new codebrock\"></p>\n<h2 id=\"gatsby-remark-prismjs-title-と-gatsby-remark-code-titles\" style=\"position:relative;\">gatsby-remark-prismjs-title と gatsby-remark-code-titles</h2>\n<p>この 2 つのプラグインはどちらもコードブロックの直前に title を挿入してくれるプラグインです。</p>\n<p>今回使っていない方 <code class=\"language-text\">gatsby-remark-code-titles</code>では div 単体でコードが挿入されます。\n<code class=\"language-text\">gatsby-remark-prismjs-title</code>では div > span の構造で挿入してくれるため style しやすいためこちらを選択しました。</p>","frontmatter":{"title":"GatsbyJSでコードブロックを作成する","date":"2020-01-05","tags":["GatsbyJS"]}}},"pageContext":{"slug":"gatsby-codebrock","previous":{"excerpt":"この記事では GatsbyJS で作るブログの slug(URL のパス部分) のカスタマイズ方法を紹介します。 gatsby-source-filesystem を使用している前提で説明します(gatsby-starter-blog に入っています)。 手順. /gatsby…","fields":{"slug":"gatsby-customize-slug"},"frontmatter":{"title":"GatsbyJSで記事のURLをカスタマイズする"}},"next":{"excerpt":"Firebase Function から Cloud Messaging (FCM HTTP v1 API) を使って通知を送る方法のメモです。  の初期化設定する アプリサーバーからの送信リクエストを作成する  |  Firebase…","fields":{"slug":"firebase-messaging-by-function"},"frontmatter":{"title":"Firebase Function 内から Cloud Messaging で通知を投げる最小コード"}}}}}