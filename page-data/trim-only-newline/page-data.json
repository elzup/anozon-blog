{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/trim-only-newline","result":{"data":{"site":{"siteMetadata":{"title":"あのぞんブログ","author":"anozon","siteUrl":"https://blog.anozon.me"}},"markdownRemark":{"id":"acc7e142-3e61-5278-a293-f4a6b41196fc","excerpt":"複数行テキストの trim で行頭の空白を消されたくない時があったので、前後の改行のみ消す方法を紹介します。 方法 コード サンプル Repl.it - trim-only 動作","html":"<p>複数行テキストの trim で行頭の空白を消されたくない時があったので、前後の改行のみ消す方法を紹介します。</p>\n<h2 id=\"方法\">方法</h2>\n<h3 id=\"コード\">コード</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">trimLine</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">text<span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> text<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\n*|\\n*$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"サンプル\">サンプル</h3>\n<p><a href=\"https://repl.it/@anozon/trim-only#index.js\">Repl.it - trim-only</a></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\n  &lt;- keep space ->   \nkeep double newline\n\n\n  &lt;- keep space ->   \n\n\n</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">trimKeepWhite</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> text<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\n*|\\n*$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> res1 <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> res2 <span class=\"token operator\">=</span> <span class=\"token function\">trimKeepWhite</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">wrapLines</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  text\n    <span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">l</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">|</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>l<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">|</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'trim'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">wrapLines</span><span class=\"token punctuation\">(</span>res1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'trim without whitespace'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">wrapLines</span><span class=\"token punctuation\">(</span>res2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"動作\">動作</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">trim 空白も削除されます。\n|&lt;- keep space -&gt;   |\n|keep double newline|\n||\n||\n|  &lt;- keep space -&gt;|\n\ntrim without whitespace 空白は保持しています。\n|  &lt;- keep space -&gt;   |\n|keep double newline|\n||\n||\n|  &lt;- keep space -&gt;   |</code></pre></div>","frontmatter":{"title":"js の trim で前後の改行のみ取り除く(空白は保持する)","date":"2020-08-17","tags":["JavaScript"]}}},"pageContext":{"slug":"trim-only-newline","previous":{"excerpt":"Python スクリプトでリアルタイムにログが出力されないときの対処法。 -u オプションで起動する -u オプション | 1. コマンドラインと環境 — Python 3.8.5 ドキュメント 端末以外からの実行だとバッファして stdout…","fields":{"slug":"python-buffer-print"},"frontmatter":{"title":"Python で Systemd や nohup を使っていてログがリアルタイムに出力されないとき"}},"next":{"excerpt":"スプレッド構文で書くのが面倒だったので検証しました。 結果 結論としてはクローンが書きやすいし速いので良さそうでした。  コスト 書きやすさ スプレッド構文 221 ms △ スプレッド構文でクローンして代入 195 ms ○ Object.assign…","fields":{"slug":"javascript-object-update"},"frontmatter":{"title":"JavaScript で Object の更新はどれが速いのか"}}}},"staticQueryHashes":["1855083372","2529228376","3070792728"]}