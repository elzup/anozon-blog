{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/clasp-intro","result":{"data":{"site":{"id":"Site","siteMetadata":{"title":"あのぞんブログ","author":"anozon","siteUrl":"https://blog.anozon.me"}},"markdownRemark":{"id":"5e8f7ef4-b634-5fc5-a0d8-17ad5995c147","excerpt":"この記事では Clasp を使って GoogleAppScript のコードを手元で管理する方法を紹介します。 Clasp Command Line Interface using clasp | Google Developers 手順…","html":"<p>この記事では <strong>Clasp</strong> を使って GoogleAppScript のコードを手元で管理する方法を紹介します。</p>\n<p>Clasp <a href=\"https://developers.google.com/apps-script/guides/clasp\">Command Line Interface using clasp | Google Developers</a></p>\n<h2 id=\"手順-1-初期化する\" style=\"position:relative;\">手順 1. 初期化する</h2>\n<p>管理するディレクトリに移動してしてパッケージをインストールします。\nその後 Google アカウントでログインします。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> @google/clasp -D\nclasp login</code></pre></div>\n<p>プロジェクトのみに入れてる場合は以降の <code class=\"language-text\">clasp hoge</code> を <code class=\"language-text\">yarn clasp hoge</code> に置き換えて読んでください。</p>\n<p>さらに下の <code class=\"language-text\">gas</code> ディレクトリで管理してみます。</p>\n<p><strong>既存のプロジェクトの場合</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">clasp clone smartbooth-dummy --rootDir ./gas</code></pre></div>\n<p><strong>新規のプロジェクトの場合</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">clasp create --type standalone --rootDir ./gas</code></pre></div>\n<h2 id=\"手順-2-コードを書く\" style=\"position:relative;\">手順 2. コードを書く</h2>\n<p>gas ディレクトリに ファイルを作成して関数を書きます。</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>\"gas/main.js\"</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/* global Logger */</span>\n\n<span class=\"token comment\">// eslint-disable-next-line no-unused-vars</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">timeLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  Logger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"手順-3-デプロイする\" style=\"position:relative;\">手順 3. デプロイする</h2>\n<p>以下のコマンドで実行すると更新されます。(push と deploy 両方必要なので注意)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">clasp push &amp;&amp; clasp deploy</code></pre></div>\n<p>確認してみる。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">clasp open</code></pre></div>\n<h2 id=\"環境変数を使いたいとき\" style=\"position:relative;\">環境変数を使いたいとき</h2>\n<p>コードに残したくない定数は <code class=\"language-text\">PropertiesService</code> を使います。</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>\"gas/main.js\"</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> PropertiesService<span class=\"token punctuation\">.</span><span class=\"token function\">getScriptProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'API_TOKEN'</span><span class=\"token punctuation\">)</span>\nLogger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span></code></pre></div>\n<p>値の設定は Clasp からはできなさそうでした。</p>\n<p><code class=\"language-text\">clasp open</code> して <code class=\"language-text\">ファイル &gt; プロジェクトのプロパティ &gt; スクリプトのプロパティタブ</code> から設定してください。</p>\n<p><img src=\"https://elzup-image-storage.s3.amazonaws.com/blog/gasproperty.png\" alt=\"gas-propety\"></p>\n<h2 id=\"typescript-の場合\" style=\"position:relative;\">TypeScript の場合</h2>\n<p>TypeScript も Clasp 公式でサポートされていて、こちらに詳しく書いてあります。</p>\n<p><a href=\"https://github.com/google/clasp/blob/master/docs/typescript.md\">clasp/typescript.md at master · google/clasp</a></p>\n<p><code class=\"language-text\">@types/google-apps-script</code> で Global なモジュールの Type が使えます。</p>","frontmatter":{"title":"【Clasp】GoogleAppScript のコードをローカルで開発する","date":"2020-01-21","tags":["Clasp","GoogleAppScript","TypeScript"]}}},"pageContext":{"slug":"clasp-intro","previous":{"excerpt":"経年劣化に耐える ReactComponent の書き方 - Qiita\nが良さそうだったので TypeScript で書く場合を試してみた。 コード CodeSandbox 気になる部分 StyledComponent で既存 Component を Wrap…","fields":{"slug":"layer-react-counterapp"},"frontmatter":{"title":"5層 ReactComponent と TypeScript でカウンター書いてみる"}},"next":{"excerpt":"この記事では zstyle で現在の値を取得する について紹介します。 zstyle コマンドのマニュアル zsh: 22 Zsh Modules 方法 1. -g オプションを使う。 方法…","fields":{"slug":"zstyle-get-current-value"},"frontmatter":{"title":"zstyle で現在の値を取得する"}}}}}