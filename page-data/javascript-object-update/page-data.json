{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/javascript-object-update","result":{"data":{"site":{"siteMetadata":{"title":"あのぞんブログ","author":"anozon","siteUrl":"https://blog.anozon.me"}},"markdownRemark":{"id":"0d657869-cd79-55fe-9da8-6441c5c060eb","excerpt":"スプレッド構文で書くのが面倒だったので検証しました。 結果 結論としてはクローンが書きやすいし速いので良さそうでした。  コスト 書きやすさ スプレッド構文 221 ms △ スプレッド構文でクローンして代入 195 ms ○ Object.assign でクローンして代入 9126 ms…","html":"<p>スプレッド構文で書くのが面倒だったので検証しました。</p>\n<h2 id=\"結果\" style=\"position:relative;\">結果</h2>\n<p>結論としてはクローンが書きやすいし速いので良さそうでした。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>コスト</th>\n<th>書きやすさ</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>スプレッド構文</td>\n<td>221 ms</td>\n<td>△</td>\n</tr>\n<tr>\n<td>スプレッド構文でクローンして代入</td>\n<td>195 ms</td>\n<td>○</td>\n</tr>\n<tr>\n<td>Object.assign でクローンして代入</td>\n<td>9126 ms</td>\n<td>○</td>\n</tr>\n</tbody>\n</table>\n<p>恐らく単体では誤差の範囲です。<br>\nですが大規模データでの統計や実行回数が増える場合は意識しようと思いました。</p>\n<p>検証環境: <code class=\"language-text\">node v12.16.1</code><br>\nコード: <a href=\"https://repl.it/@anozon/object-update-spped#index.js\">https://repl.it/@anozon/object-update-spped#index.js</a></p>\n<h2 id=\"検証\" style=\"position:relative;\">検証</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ただ代入する破壊的変更のパターン。</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">updateObjOverwrite</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> key1<span class=\"token punctuation\">,</span> key2<span class=\"token punctuation\">,</span> v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  obj<span class=\"token punctuation\">[</span>key1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>key2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v\n  <span class=\"token keyword\">return</span> obj\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// スプレッド構文</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">updateObjSpread</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> key1<span class=\"token punctuation\">,</span> key2<span class=\"token punctuation\">,</span> v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>obj<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>key1<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>obj<span class=\"token punctuation\">[</span>key1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">[</span>key1<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> v<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// スプレッド構文でクローンして代入</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">updateObjCloneObjectAssign</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> key1<span class=\"token punctuation\">,</span> key2<span class=\"token punctuation\">,</span> v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newObj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span>\n\n  newObj<span class=\"token punctuation\">[</span>key1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>key2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v\n  <span class=\"token keyword\">return</span> newObj\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Object.assign でクローンして代入</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">updateObjCloneSpread</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> key1<span class=\"token punctuation\">,</span> key2<span class=\"token punctuation\">,</span> v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>obj <span class=\"token punctuation\">}</span>\n\n  newObj<span class=\"token punctuation\">[</span>key1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>key2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v\n  <span class=\"token keyword\">return</span> newObj\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>1000key x 1000key のオブジェクトについて、 10000 回実行しました。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  obj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    obj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">rand</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">nope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> funcs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  nope<span class=\"token punctuation\">,</span>\n  updateObjOverwrite<span class=\"token punctuation\">,</span>\n  updateObjSpread<span class=\"token punctuation\">,</span>\n  updateObjCloneSpread<span class=\"token punctuation\">,</span>\n  updateObjCloneObjectAssign<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\nfuncs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start<span class=\"token punctuation\">,</span> <span class=\"token string\">'ms'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">nope 24 ms\nupdateObjOverwrite 80 ms\nupdateObjSpread 214 ms\nupdateObjCloneSpread 183 ms\nupdateObjCloneObjectAssign 8298 ms\n\nnope 76 ms\nupdateObjOverwrite 82 ms\nupdateObjSpread 221 ms\nupdateObjCloneSpread 195 ms\nupdateObjCloneObjectAssign 9126 ms</code></pre></div>\n<h2 id=\"その他\" style=\"position:relative;\">その他</h2>\n<p>JSON.parse でクローンするのも速かったんだっけ？と思って調べなおそうとしたんですが、<br>\nそれは Object literal より JSON.parse のほうが速いって話でした。</p>\n<p><a href=\"https://www.google.com/search?q=json+parse+vs+object+literal\">json parse vs object literal - Google 検索</a></p>","frontmatter":{"title":"JavaScript で Object の更新はどれが速いのか","date":"2020-08-23","tags":["JavaScript"]}}},"pageContext":{"slug":"javascript-object-update","previous":{"excerpt":"複数行テキストの trim で行頭の空白を消されたくない時があったので、前後の改行のみ消す方法を紹介します。 方法 コード サンプル Repl.it - trim-only 動作","fields":{"slug":"trim-only-newline"},"frontmatter":{"title":"js の trim で前後の改行のみ取り除く(空白は保持する)"}},"next":null}},"staticQueryHashes":["1855083372","3070792728","4156694545"]}