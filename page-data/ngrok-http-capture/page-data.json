{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/ngrok-http-capture","result":{"data":{"site":{"siteMetadata":{"title":"あのぞんブログ","author":"anozon","siteUrl":"https://blog.anozon.me"}},"markdownRemark":{"id":"42ebf84d-b0fb-589c-8f23-6fd154c4b513","excerpt":"「自前の API にリクエストは届いてるけどなにか不具合が起きている」「リクエストをダンプする環境をすぐに用意するのはダルい」とき用。\nngrok の本来の使い方とは違いますが、http パケットキャプチャができます。 ngrok とは どんな事ができるか ngrok とは ngrok - secure…","html":"<p>「自前の API にリクエストは届いてるけどなにか不具合が起きている」「リクエストをダンプする環境をすぐに用意するのはダルい」とき用。\nngrok の本来の使い方とは違いますが、http パケットキャプチャができます。</p>\n<div class=\"toc\">\n<ul>\n<li><a href=\"#ngrok-%E3%81%A8%E3%81%AF\">ngrok とは</a></li>\n<li><a href=\"#%E3%81%A9%E3%82%93%E3%81%AA%E4%BA%8B%E3%81%8C%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%8B\">どんな事ができるか</a></li>\n</ul>\n</div>\n<h2 id=\"ngrok-とは\">ngrok とは</h2>\n<p><a href=\"https://ngrok.com/\">ngrok - secure introspectable tunnels to localhost</a></p>\n<p>使い捨て URL (https) でローカルのネットワークを外部に公開できるサービスです。</p>\n<p><code class=\"language-text\">brew install ngrok</code> でも入れられるようになりました。</p>\n<p>セットアップ手順 <a href=\"https://ngrok.com/docs\">ngrok – documentation</a></p>\n<p>無料ユーザ登録と cli に key 登録が必要です。</p>\n<h2 id=\"どんな事ができるか\">どんな事ができるか</h2>\n<p>コマンドで立ち上げます。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ngrok http <span class=\"token number\">3000</span>\nngrok by @inconshreveable                                        <span class=\"token punctuation\">(</span>Ctrl+C to quit<span class=\"token punctuation\">)</span>\n\nSession Status                online\nAccount                       elzup <span class=\"token punctuation\">(</span>Plan: Free<span class=\"token punctuation\">)</span>\nVersion                       <span class=\"token number\">2.3</span>.35\nRegion                        United States <span class=\"token punctuation\">(</span>us<span class=\"token punctuation\">)</span>\nWeb Interface                 http://127.0.0.1:4040\nForwarding                    http://9e95453ed1cb.ngrok.io -<span class=\"token operator\">></span> http://localhost:3000\nForwarding                    https://9e95453ed1cb.ngrok.io -<span class=\"token operator\">></span> http://localhost:3000\n\nConnections                   ttl     opn     rt1     rt5     p50     p90\n                              <span class=\"token number\">0</span>       <span class=\"token number\">0</span>       <span class=\"token number\">0.00</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">0.00</span></code></pre></div>\n<p>ここで web アプリを立ててくれます。 <code class=\"language-text\">http://127.0.0.1:4040</code></p>\n<p>例えば以下のようなリクエストを投げてみます。</p>\n<div class=\"gatsby-highlight\" data-language=\"curl\"><pre class=\"language-curl\"><code class=\"language-curl\">curl -X PUT &quot;https://9e95453ed1cb.ngrok.io/path/hello?query=hello-query&quot; -H &quot;x-myheader: hello-header&quot; -d &#39;{&quot;body&quot;:&quot;hello&quot;}&#39;</code></pre></div>\n<p>すると受け取った(ngrok が通した) HTTP の中身を見ることが出来ます。</p>\n<p><img src=\"https://elzup-image-storage.s3.amazonaws.com/blog/ngrok-sample.png\" alt=\"ngrokサンプル\"></p>\n<p>デフォルトでは ngrok が 502 レスポンスを返すようです。<br>\nもちろん ローカルで http server を立てておけば レスポンス側の内容も見れます。</p>","frontmatter":{"title":"ngrok で http リクエストの中身を全部確認する【IoTデバッグ】","date":"2020-10-13","tags":["http","ngrok"]}}},"pageContext":{"slug":"ngrok-http-capture","previous":{"excerpt":"コード 1  を使う方法です。 コード 2 コード 1 でいいですが最初に思いついた正規表現で削る方法です。\n動作が早いかわからないですが (渡される n が行数より大きいときに使えません。)\n遅かったです。Repl.it - regex-vs-slice","fields":{"slug":"js-remove-head-line"},"frontmatter":{"title":"js で文字列の先頭のn 行を削除する"}},"next":{"excerpt":"メモリ付きの定規、ルーラーコンポーネントのサンプルです。 react-memory-component コード ruler-with-memory - CodeSandbox ミソ ブロック部分とメモリ部分を 0.…","fields":{"slug":"react-memory-ruler"},"frontmatter":{"title":"React と display grid でメモリ付き定規"}}}},"staticQueryHashes":["1855083372","2529228376","3070792728"]}