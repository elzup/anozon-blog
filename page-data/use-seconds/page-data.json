{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/use-seconds","result":{"data":{"site":{"id":"Site","siteMetadata":{"title":"あのぞんブログ","author":"anozon","siteUrl":"https://blog.anozon.me"}},"markdownRemark":{"id":"ff69e6c1-d2dc-5545-a304-92ef4367b426","excerpt":"という react-hooks ライブラリ を作りました。 elzup/use-seconds: Seconds interval time for React hooks DEMO - CodeSandbox useSecounds の特徴 setInterval はずれていく hooks…","html":"<p><code class=\"language-text\">useSecounds</code> という react-hooks ライブラリ を作りました。</p>\n<p><a href=\"https://github.com/elzup/use-seconds\">elzup/use-seconds: Seconds interval time for React hooks</a></p>\n<p><a href=\"https://codesandbox.io/s/use-seconds-example-w875w\">DEMO - CodeSandbox</a></p>\n<div class=\"toc\">\n<ul>\n<li><a href=\"#usesecounds-%E3%81%AE%E7%89%B9%E5%BE%B4\">useSecounds の特徴</a></li>\n<li><a href=\"#setinterval-%E3%81%AF%E3%81%9A%E3%82%8C%E3%81%A6%E3%81%84%E3%81%8F\">setInterval はずれていく</a></li>\n<li>\n<p><a href=\"#hooks-%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%81%AE%E5%AE%9F%E8%A3%85%E3%81%A7%E6%84%8F%E8%AD%98%E3%81%97%E3%81%9F%E3%81%93%E3%81%A8\">hooks ライブラリの実装で意識したこと</a></p>\n<ul>\n<li><a href=\"#%E8%BF%94%E3%82%8A%E5%80%A4%E3%81%8C%E9%85%8D%E5%88%97%E3%81%AB%E3%81%97%E3%81%9F\">返り値が配列にした</a></li>\n<li><a href=\"#usestate-%E3%82%92%E5%88%86%E3%81%91%E3%81%9F\">useState を分けた</a></li>\n<li><a href=\"#create-react-hook\">create-react-hook</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"usesecounds-の特徴\" style=\"position:relative;\">useSecounds の特徴</h2>\n<ul>\n<li>長時間使用しても .000 (コンマ 0 ミリ秒) のタイミングで更新する</li>\n<li><strong>getSeconds() が 1 つ前の Date を渡さない</strong></li>\n</ul>\n<p>処理が早まって x.995 のタイミングで更新が発生しても (x + 1).000 のタイムスタンプを返します。</p>\n<h2 id=\"setinterval-はずれていく\" style=\"position:relative;\">setInterval はずれていく</h2>\n<p>「setInterval は 登録時の timestamp から 補正しながら実行されるのか？ 🤔」と思い調べてみたのですがずれていく(drift する)みたいです。</p>\n<p>参考: <a href=\"https://stackoverflow.com/questions/985670/will-setinterval-drift\">javascript - Will setInterval drift? - Stack Overflow</a></p>\n<p>検証してみても徐々にずれていきました。</p>\n<p><img src=\"https://elzup-image-storage.s3.amazonaws.com/blog/set-interval-1h.png\"></p>\n<h2 id=\"hooks-ライブラリの実装で意識したこと\" style=\"position:relative;\">hooks ライブラリの実装で意識したこと</h2>\n<h3 id=\"返り値が配列にした\" style=\"position:relative;\">返り値が配列にした</h3>\n<p>最初オブジェクトで実装していたのですが、<a href=\"https://dev.to/namick/writing-your-own-react-hooks-the-return-value-3lp6\">返り値についての記事</a>を読んで配列にしました。</p>\n<p><a href=\"https://dev.to/namick/writing-your-own-react-hooks-the-return-value-3lp6\">Writing Your Own React Hooks, the Return Value - DEV Community 👩‍💻👨‍💻</a></p>\n<p>命名できる利点が挙げられています。</p>\n<h3 id=\"usestate-を分けた\" style=\"position:relative;\">useState を分けた</h3>\n<p>カスタムフックの中で 管理していた state が 3 つあったのですが useState 3 つに分けました。</p>\n<p>公式ドキュメントに保守性が上がる理由を挙げられています。</p>\n<p><a href=\"https://ja.reactjs.org/docs/hooks-faq.html#should-i-use-one-or-many-state-variables\">フックに関するよくある質問 – React</a></p>\n<h3 id=\"create-react-hook\" style=\"position:relative;\">create-react-hook</h3>\n<p><a href=\"https://github.com/hermanya/create-react-hook\">https://github.com/hermanya/create-react-hook</a> が使いやすかった。</p>\n<ul>\n<li>TypeScript サポート</li>\n<li>example ディレクトリがある</li>\n<li>test のサンプルがある</li>\n</ul>\n<p>などが良かったです。</p>","frontmatter":{"title":"useSecounds という時計用 hooks を作った","date":"2020-03-08","tags":["React hooks","作った"]}}},"pageContext":{"slug":"use-seconds","previous":{"excerpt":"git は  でデフォルトのコミットメッセージの設定できます。 例えばこのブログのリポジトリは、記事を書いたとき 📝  をコミットメッセージの先頭に入れています。  毎回入力するのは面倒なので  を使って省略してみます。 手順…","fields":{"slug":"git-commit-message-template"},"frontmatter":{"title":"gitリポジトリごとにデフォルトのコミットメッセージを設定する"}},"next":null}}}