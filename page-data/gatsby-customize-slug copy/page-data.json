{"componentChunkName":"component---src-templates-blog-post-js","path":"/gatsby-customize-slug copy","result":{"data":{"site":{"siteMetadata":{"title":"あのぞんブログ","author":"anozon"}},"markdownRemark":{"id":"3439cc2b-f676-50ae-b760-5e9f2c684a8f","excerpt":"この記事では GatsbyJS で作るブログの slug(URL のパス部分) のカスタマイズ方法を紹介します。 gatsby-source-filesystem を使用している前提で説明します(gatsby-starter-blog に入っています)。 手順. /gatsby-node.js を編集する slug…","html":"<p>この記事では GatsbyJS で作るブログの <strong>slug(URL のパス部分)</strong> のカスタマイズ方法を紹介します。</p>\n<p><a href=\"https://www.gatsbyjs.org/packages/gatsby-source-filesystem/\">gatsby-source-filesystem</a> を使用している前提で説明します(gatsby-starter-blog に入っています)。</p>\n<h2>手順. /gatsby-node.js を編集する</h2>\n<p>slug は <code class=\"language-text\">/gatsby-node.js</code> の onCreateNode 内の createNodeField で設定しています。以下のコードでは createFilePath で作成されるパスがそのまま設定されています。</p>\n<div class=\"gatsby-highlight\" data-language=\"js:gatsby-node.js\"><pre class=\"language-js:gatsby-node.js\"><code class=\"language-js:gatsby-node.js\">exports.onCreateNode = ({ nodeundefined actionsundefined getNode }) =&gt; {\n  const value = createFilePath({ nodeundefined getNode })\n  createNodeField({\n    name: `slug`undefined\n    nodeundefined\n    valueundefined\n  })\n}</code></pre></div>\n<p>createFilePath で返されるパスは <code class=\"language-text\">gatsby-source-filesystem</code> の path オプションをルートとした絶対パスとなっています。<strong>ファイルの拡張子はついていません</strong>。</p>\n<div class=\"gatsby-highlight\" data-language=\"js:gatsby-config.js\"><pre class=\"language-js:gatsby-config.js\"><code class=\"language-js:gatsby-config.js\">  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`undefined\n      options: {\n        path: `${__dirname}/content/blog`undefined\n        name: `blog`undefined\n      }undefined\n    }undefined</code></pre></div>\n<h2>実装例</h2>\n<p>今回このブログを例にカスタマイズします。</p>\n<p>僕のブログではブログポストのファイルは以下のディレクトリに配置しています。</p>\n<p><code class=\"language-text\">/content/blog/2020/2020-01-04___gatsby-customize-slug.md</code></p>\n<p>(<code class=\"language-text\">/content/blog/{year}/{year}-{month}-{day}___{slug}.md</code>)</p>\n<p>URL は以下のようになっています。</p>\n<p><code class=\"language-text\">https://blog.anozon.me/2020/2020-01-04_gatsby-customize-slug</code></p>\n<p>この日付入り URL を、記事の ID に当たる部分のみに省略してシンプルにします。</p>\n<p><code class=\"language-text\">https://blog.anozon.me/gatsby-customize-slug</code></p>\n<p><a href=\"https://github.com/elzup/anozonbiyori/commit/34505a0a39640ea0b2a1b60c7662412544179510#diff-fda05457e393bada716f508859bfc604\">実装 Commit</a></p>\n<p>変更点</p>\n<ul>\n<li>\n<p>SLUG_SEPARATOR によって slug 部分をチュシュツして返す getSlug 関数の作成</p>\n<ul>\n<li>SLUG_SEPARATOR を含まない場合はそのまま</li>\n</ul>\n</li>\n<li>getSlug を適用して返す</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js:gatsby-node.js\"><pre class=\"language-js:gatsby-node.js\"><code class=\"language-js:gatsby-node.js\">const SLUG_SEPARATOR = &#39;___&#39;\n\n// &#39;2020/2020-01-04___gatsby-customize-slug&#39; → &#39;gatsby-customize-slug&#39;\nconst getSlug = path =&gt; {\n  const [prefixundefined slug] = path.split(SLUG_SEPARATOR)\n  return slug || path\n}\n\nif (node.internal.type !== `MarkdownRemark`) return\n\nconst { createNodeField } = actions\nconst filePath = createFilePath({ nodeundefined getNodeundefined trailingSlash: false })\nconst slug = getSlug(filePath)\n\ncreateNodeField({\n  name: `slug`undefined\n  nodeundefined\n  value: slugundefined\n})</code></pre></div>\n<p><img src=\"https://elzup-image-storage.s3-ap-northeast-1.amazonaws.com/blog/gatsby-custom-slug.png\" alt=\"https://elzup-image-storage.s3-ap-northeast-1.amazonaws.com/blog/gatsby-custom-slug.png\"></p>\n<p>カスタマイズできました。</p>","frontmatter":{"title":"GatsbyJSで記事のURLをカスタマイズする","date":"2020-01-04 23:03:38"}}},"pageContext":{"slug":"gatsby-customize-slug copy","previous":{"fields":{"slug":"gatsby-skill-twitter"},"frontmatter":{"title":"Gatsby で Twitter 埋め込みする"}},"next":{"fields":{"slug":"gatsby-customize-slug"},"frontmatter":{"title":"GatsbyJSで記事のURLをカスタマイズする"}}}}}