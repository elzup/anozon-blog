{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/emoji-moji-count","result":{"data":{"site":{"siteMetadata":{"title":"あのぞんブログ","author":"anozon","siteUrl":"https://blog.anozon.me"}},"markdownRemark":{"id":"0821488e-ca09-59c9-81da-4a37c34d10cf","excerpt":"アプリ 絵文字対応 カウントする関数 エスケープ文字の可視化 アプリ 文字頻度カウント(絵文字対応)\nemoji-count 絵文字対応  では絵文字が 1 文字として分割できません。  を使います。 bestiejs/punycode.js: A robust Punycode converter that…","html":"<div class=\"toc\">\n<ul>\n<li><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA\">アプリ</a></li>\n<li><a href=\"#%E7%B5%B5%E6%96%87%E5%AD%97%E5%AF%BE%E5%BF%9C\">絵文字対応</a></li>\n<li><a href=\"#%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E3%81%99%E3%82%8B%E9%96%A2%E6%95%B0\">カウントする関数</a></li>\n<li><a href=\"#%E3%82%A8%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%97%E6%96%87%E5%AD%97%E3%81%AE%E5%8F%AF%E8%A6%96%E5%8C%96\">エスケープ文字の可視化</a></li>\n</ul>\n</div>\n<h2 id=\"アプリ\">アプリ</h2>\n<p><a href=\"https://tools.anozon.me/char-counter\">文字頻度カウント(絵文字対応)</a>\n<img src=\"https://elzup-image-storage.s3.amazonaws.com/blog/emoji-count.png\" alt=\"emoji-count\"></p>\n<h2 id=\"絵文字対応\">絵文字対応</h2>\n<p><code class=\"language-text\">&quot;text&quot;.split(&#39;&#39;)</code> では絵文字が 1 文字として分割できません。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">></span> <span class=\"token string\">\"😔\"</span>\n<span class=\"token string\">'😔'</span>\n<span class=\"token operator\">></span> <span class=\"token string\">\"😔\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span> <span class=\"token string\">'�'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'�'</span> <span class=\"token punctuation\">]</span></code></pre></div>\n<p><code class=\"language-text\">punycode.js</code> を使います。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">punySplit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>s<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  punycode<span class=\"token punctuation\">.</span>ucs2<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> punycode<span class=\"token punctuation\">.</span>ucs2<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">punySplit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'😔'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [ '😔' ]</span>\n<span class=\"token function\">punySplit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'😔😎'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [ '😔', '😎' ]</span></code></pre></div>\n<p><a href=\"https://github.com/bestiejs/punycode.js/\">bestiejs/punycode.js: A robust Punycode converter that fully complies to RFC 3492 and RFC 5891.</a></p>\n<h2 id=\"カウントする関数\">カウントする関数</h2>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> punycode <span class=\"token keyword\">from</span> <span class=\"token string\">'punycode'</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Count</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> char<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> count<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">analyzeCount</span><span class=\"token punctuation\">(</span>text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Count<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> map<span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> chars <span class=\"token operator\">=</span> punycode<span class=\"token punctuation\">.</span>ucs2<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> punycode<span class=\"token punctuation\">.</span>ucs2<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  chars<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    map<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> v2 <span class=\"token operator\">-</span> v1<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>char<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> char<span class=\"token punctuation\">,</span> count <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"エスケープ文字の可視化\">エスケープ文字の可視化</h2>\n<p>そのまま React で render すると改行文字(<code class=\"language-text\">\\n</code>)が見えないのでバックスラッシュをエスケープしました。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">visibleEscapeChars</span><span class=\"token punctuation\">(</span>text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> text\n    <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\t/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\\\t'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\v/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\\\v'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\n/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\\\n'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\r/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\\\r'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\f/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\\\f'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\0/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\\\0'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>なにかこういうライブラリあれば知りたいです。</p>","frontmatter":{"title":"絵文字を含めて文字数カウントするWebアプリ作った","date":"2020-10-02","tags":["JavaScript","TypeScript"]}}},"pageContext":{"slug":"emoji-moji-count","previous":{"excerpt":"配列の中で条件に該当する１つ目を取り出す関数。\nなければ None を返す。","fields":{"slug":"python-find-arr-func"},"frontmatter":{"title":"Python で Array.find"}},"next":{"excerpt":"コード 1  を使う方法です。 コード 2 コード 1 でいいですが最初に思いついた正規表現で削る方法です。\n動作が早いかわからないですが (渡される n が行数より大きいときに使えません。)\n遅かったです。Repl.it - regex-vs-slice","fields":{"slug":"js-remove-head-line"},"frontmatter":{"title":"js で文字列の先頭のn 行を削除する"}}}},"staticQueryHashes":["1855083372","3070792728","4156694545"]}