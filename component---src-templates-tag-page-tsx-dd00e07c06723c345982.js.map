{"version":3,"sources":["webpack:///./src/templates/TagPage.tsx","webpack:///./src/components/Pagination.tsx"],"names":["TagPageTemplate","data","pageContext","location","pages","siteTitle","site","siteMetadata","title","tag","PageBar","prefix","kebabCase","current","currentPage","last","numPages","description","edges","map","node","frontmatter","fields","slug","key","style","marginBottom","rhythm","boxShadow","to","dangerouslySetInnerHTML","__html","excerpt","pageQuery","Button","styled","Link","button","pagePath","n","Style","div","Pagination","prevNum","nextNum"],"mappings":"2FAAA,kJA6DeA,UAzCf,YAAiE,IAAtCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,SACpCC,EAAgBH,EAAhBG,MACFC,EADkBJ,EAATK,KACQC,aAAaC,MAC5BC,EAAQP,EAARO,IAEFC,EACJ,gBAAC,IAAD,CACEC,OAAM,SAAWC,IAAUH,GAC3BI,QAASX,EAAYY,aAAe,EACpCC,KAAMb,EAAYc,UAAY,IAIlC,OACE,gBAAC,IAAD,CAAQb,SAAUA,EAAUK,MAAOH,GACjC,gBAAC,IAAD,CAAKG,MAAUC,EAAL,MAAcJ,EAAaY,YAAgBR,EAAL,UAChD,0BAAKA,GACJP,EAAYY,YAAc,GAAKJ,EAC/BN,EAAMc,MAAMC,KAAI,YAAc,IAAXC,EAAW,EAAXA,KACZZ,EAAQY,EAAKC,YAAYb,OAASY,EAAKE,OAAOC,KAEpD,OACE,uBAAKC,IAAKJ,EAAKE,OAAOC,MACpB,sBACEE,MAAO,CACLC,aAAcC,YAAO,OAGvB,gBAAC,OAAD,CAAMF,MAAO,CAAEG,UAAW,QAAUC,GAAE,IAAMT,EAAKE,OAAOC,MACrDf,IAGL,qBAAGsB,wBAAyB,CAAEC,OAAQX,EAAKY,eAIhDtB,IAOA,IAAMuB,EAAY,c,kCC/DzB,oDAWMC,EAASC,YAAOC,QAAV,yEAAGD,CAAH,uDACRE,KAMEC,EAAW,SAACC,GAAD,OAAsB,IAANA,EAAU,IAAV,SAAyBA,GAsB1D,IAAMC,EAAQL,IAAOM,IAAV,wEAAGN,CAAH,oLAKLE,KAYSK,IAjCf,YAA2D,IAArC7B,EAAqC,EAArCA,QAASE,EAA4B,EAA5BA,KAA4B,IAAtBJ,cAAsB,MAAb,GAAa,EAEnDgC,EAAsB,IAAZ9B,GAAiBA,EAAU,EACrC+B,EAAU/B,IAAYE,GAAQF,EAAU,EAE9C,OAAa,IAATE,EAAmB,KAGrB,gBAACyB,EAAD,KACGG,GAAW,gBAACT,EAAD,CAAQL,GAAIlB,EAAS2B,EAASK,IAAW,MACrD,4BAAO9B,GACN+B,GAAW,gBAACV,EAAD,CAAQL,GAAIlB,EAAS2B,EAASM,IAAW","file":"component---src-templates-tag-page-tsx-dd00e07c06723c345982.js","sourcesContent":["import * as React from 'react'\nimport { Link, graphql } from 'gatsby'\n\nimport kebabCase from 'lodash/kebabCase'\nimport Layout from '../components/Layout'\nimport SEO from '../components/Seo'\nimport { rhythm } from '../utils/typography'\nimport {\n  SitePageContext,\n  TagSearchQuery,\n  TagSearchQueryVariables,\n} from '../../types/graphql-types.d'\nimport Pagination from '../components/Pagination'\n\ntype Props = {\n  location: Location\n  data: TagSearchQuery\n  pageContext: SitePageContext & TagSearchQueryVariables\n}\n\nfunction TagPageTemplate({ data, pageContext, location }: Props) {\n  const { pages, site } = data\n  const siteTitle = site.siteMetadata.title\n  const { tag } = pageContext\n\n  const PageBar = (\n    <Pagination\n      prefix={`/tags/${kebabCase(tag)}`}\n      current={pageContext.currentPage || 1}\n      last={pageContext.numPages || 1}\n    />\n  )\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title={`${tag} - ${siteTitle}`} description={`${tag}の記事一覧`} />\n      <h1>{tag}</h1>\n      {pageContext.currentPage > 1 && PageBar}\n      {pages.edges.map(({ node }) => {\n        const title = node.frontmatter.title || node.fields.slug\n\n        return (\n          <div key={node.fields.slug}>\n            <h3\n              style={{\n                marginBottom: rhythm(1 / 4),\n              }}\n            >\n              <Link style={{ boxShadow: `none` }} to={`/${node.fields.slug}`}>\n                {title}\n              </Link>\n            </h3>\n            <p dangerouslySetInnerHTML={{ __html: node.excerpt }} />\n          </div>\n        )\n      })}\n      {PageBar}\n    </Layout>\n  )\n}\n\nexport default TagPageTemplate\n\nexport const pageQuery = graphql`\n  query TagSearch($tag: String, $skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    pages: allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] }, status: { ne: \"draft\" } } }\n      limit: $limit\n      skip: $skip\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"YYYY-MM-DD\")\n            title\n          }\n        }\n      }\n    }\n  }\n`\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { Link } from 'gatsby'\nimport { button } from './common'\n\ntype Props = {\n  current: number\n  last: number\n  prefix?: string\n}\n\nconst Button = styled(Link)`\n  ${button}\n  border-radius: 4px;\n  padding: 0 16px;\n  margin: 0 2px;\n`\n\nconst pagePath = (n: number) => (n === 1 ? '/' : `/page/${n}`)\n\ntype ButtonProps = {\n  num: number\n}\n\nfunction Pagination({ current, last, prefix = '' }: Props) {\n  // const nums = range(Math.max(1, current - 2), Math.min(current + 2, last) + 1)\n  const prevNum = current !== 1 && current - 1\n  const nextNum = current !== last && current + 1\n\n  if (last === 1) return null\n\n  return (\n    <Style>\n      {prevNum && <Button to={prefix + pagePath(prevNum)}>{'<<'}</Button>}\n      <span>{current}</span>\n      {nextNum && <Button to={prefix + pagePath(nextNum)}>{'>>'}</Button>}\n    </Style>\n  )\n}\n\nconst Style = styled.div`\n  display: flex;\n  margin-top: 8px;\n  justify-content: flex-end;\n  > span {\n    ${button}\n    border-radius: 4px;\n    margin: 0 2px;\n    color: #937caf;\n    border-color: #937caf;\n    &:hover {\n      color: #937caf;\n      border-color: #937caf;\n    }\n  }\n`\n\nexport default Pagination\n"],"sourceRoot":""}