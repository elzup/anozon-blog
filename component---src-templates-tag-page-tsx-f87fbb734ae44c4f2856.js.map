{"version":3,"sources":["webpack:///./src/components/ArticleCard.tsx","webpack:///./src/templates/TagPage.tsx","webpack:///./src/components/Pagination.tsx"],"names":["Style","styled","div","rhythm","ArticalCard","title","tags","slug","date","excerpt","style","boxShadow","to","dangerouslySetInnerHTML","__html","map","value","TagPageTemplate","data","pageContext","location","pages","siteTitle","site","siteMetadata","tag","PageBar","prefix","kebabCase","current","currentPage","last","numPages","description","edges","node","frontmatter","fields","key","Button","Link","button","pagePath","n","Pagination","prevNum","nextNum"],"mappings":"2FAAA,gEA8BA,IAAMA,EAAQC,IAAOC,IAAV,yEAAGD,CAAH,qGAIOE,YAAO,EAAI,GACRA,YAAO,EAAI,IAKjBC,IA1Bf,YAAkE,IAA3CC,EAA2C,EAA3CA,MAAOC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,QAC9C,OACE,gBAACT,EAAD,KACE,0BACE,gBAAC,OAAD,CAAMU,MAAO,CAAEC,UAAW,QAAUC,GAAE,IAAML,GACzCF,IAGL,6BAAQG,GACR,qBAAGK,wBAAyB,CAAEC,OAAQL,KAEtC,gBAAC,IAAD,CAAUH,KAAMA,EAAKS,KAAI,SAACC,GAAD,MAAY,CAAEA,iB,kCCzB7C,4FA0DeC,UArCf,YAAiE,IAAtCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,SACpCC,EAAgBH,EAAhBG,MACFC,EADkBJ,EAATK,KACQC,aAAanB,MAC5BoB,EAAQN,EAARM,IAEFC,EACJ,gBAAC,IAAD,CACEC,OAAM,SAAWC,IAAUH,GAC3BI,QAASV,EAAYW,aAAe,EACpCC,KAAMZ,EAAYa,UAAY,IAIlC,OACE,gBAAC,IAAD,CAAQZ,SAAUA,EAAUf,MAAOiB,GACjC,gBAAC,IAAD,CAAKjB,MAAUoB,EAAL,MAAcH,EAAaW,YAAgBR,EAAL,UAChD,0BAAKA,GACJN,EAAYW,YAAc,GAAKJ,EAC/BL,EAAMa,MAAMnB,KAAI,YAAc,IAAXoB,EAAW,EAAXA,KACZ9B,EAAQ8B,EAAKC,YAAY/B,OAAS8B,EAAKE,OAAO9B,KAEpD,OACE,gBAAC,IAAD,CACE+B,IAAKH,EAAKE,OAAO9B,KACjBF,MAAOA,EACPE,KAAM4B,EAAKE,OAAO9B,KAClBE,QAAS0B,EAAK1B,QACdD,KAAM2B,EAAKC,YAAY5B,KACvBF,KAAM6B,EAAKC,YAAY9B,UAI5BoB,K,kCCrDP,oDAWMa,EAAStC,YAAOuC,QAAV,yEAAGvC,CAAH,uDACRwC,KAMEC,EAAW,SAACC,GAAD,OAAsB,IAANA,EAAU,IAAV,SAAyBA,GAsB1D,IAAM3C,EAAQC,IAAOC,IAAV,wEAAGD,CAAH,oLAKLwC,KAYSG,IAjCf,YAA2D,IAArCf,EAAqC,EAArCA,QAASE,EAA4B,EAA5BA,KAA4B,IAAtBJ,cAAsB,MAAb,GAAa,EAEnDkB,EAAsB,IAAZhB,GAAiBA,EAAU,EACrCiB,EAAUjB,IAAYE,GAAQF,EAAU,EAE9C,OAAa,IAATE,EAAmB,KAGrB,gBAAC/B,EAAD,KACG6C,GAAW,gBAACN,EAAD,CAAQ3B,GAAIe,EAASe,EAASG,IAAW,MACrD,4BAAOhB,GACNiB,GAAW,gBAACP,EAAD,CAAQ3B,GAAIe,EAASe,EAASI,IAAW","file":"component---src-templates-tag-page-tsx-f87fbb734ae44c4f2856.js","sourcesContent":["import * as React from 'react'\nimport { Link } from 'gatsby'\nimport styled from 'styled-components'\nimport { rhythm } from '../utils/typography'\nimport { TagChips } from './TagChip'\n\ntype Props = {\n  tags: string[]\n  slug: string\n  title: string\n  date: string\n  excerpt: string\n}\n\nfunction ArticalCard({ title, tags, slug, date, excerpt }: Props) {\n  return (\n    <Style>\n      <h3>\n        <Link style={{ boxShadow: `none` }} to={`/${slug}`}>\n          {title}\n        </Link>\n      </h3>\n      <small>{date}</small>\n      <p dangerouslySetInnerHTML={{ __html: excerpt }} />\n\n      <TagChips tags={tags.map((value) => ({ value }))} />\n    </Style>\n  )\n}\n\nconst Style = styled.div`\n  border-bottom: solid 1px #d5d5d5;\n  padding: 12px 0;\n  h3 {\n    margin-top: ${rhythm(1 / 4)};\n    margin-bottom: ${rhythm(1 / 4)};\n    border: none;\n  }\n`\n\nexport default ArticalCard\n","import * as React from 'react'\nimport { Link, graphql } from 'gatsby'\n\nimport kebabCase from 'lodash/kebabCase'\nimport Layout from '../components/Layout'\nimport SEO from '../components/Seo'\nimport { rhythm } from '../utils/typography'\nimport {\n  SitePageContext,\n  TagSearchQuery,\n  TagSearchQueryVariables,\n} from '../../types/graphql-types.d'\nimport Pagination from '../components/Pagination'\nimport ArticalCard from '../components/ArticleCard'\n\ntype Props = {\n  location: Location\n  data: TagSearchQuery\n  pageContext: SitePageContext & TagSearchQueryVariables\n}\n\nfunction TagPageTemplate({ data, pageContext, location }: Props) {\n  const { pages, site } = data\n  const siteTitle = site.siteMetadata.title\n  const { tag } = pageContext\n\n  const PageBar = (\n    <Pagination\n      prefix={`/tags/${kebabCase(tag)}`}\n      current={pageContext.currentPage || 1}\n      last={pageContext.numPages || 1}\n    />\n  )\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title={`${tag} - ${siteTitle}`} description={`${tag}の記事一覧`} />\n      <h1>{tag}</h1>\n      {pageContext.currentPage > 1 && PageBar}\n      {pages.edges.map(({ node }) => {\n        const title = node.frontmatter.title || node.fields.slug\n\n        return (\n          <ArticalCard\n            key={node.fields.slug}\n            title={title}\n            slug={node.fields.slug}\n            excerpt={node.excerpt}\n            date={node.frontmatter.date}\n            tags={node.frontmatter.tags}\n          />\n        )\n      })}\n      {PageBar}\n    </Layout>\n  )\n}\n\nexport default TagPageTemplate\n\nexport const pageQuery = graphql`\n  query TagSearch($tag: String, $skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    pages: allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] }, status: { ne: \"draft\" } } }\n      limit: $limit\n      skip: $skip\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"YYYY-MM-DD\")\n            title\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { Link } from 'gatsby'\nimport { button } from './common'\n\ntype Props = {\n  current: number\n  last: number\n  prefix?: string\n}\n\nconst Button = styled(Link)`\n  ${button}\n  border-radius: 4px;\n  padding: 0 16px;\n  margin: 0 2px;\n`\n\nconst pagePath = (n: number) => (n === 1 ? '/' : `/page/${n}`)\n\ntype ButtonProps = {\n  num: number\n}\n\nfunction Pagination({ current, last, prefix = '' }: Props) {\n  // const nums = range(Math.max(1, current - 2), Math.min(current + 2, last) + 1)\n  const prevNum = current !== 1 && current - 1\n  const nextNum = current !== last && current + 1\n\n  if (last === 1) return null\n\n  return (\n    <Style>\n      {prevNum && <Button to={prefix + pagePath(prevNum)}>{'<<'}</Button>}\n      <span>{current}</span>\n      {nextNum && <Button to={prefix + pagePath(nextNum)}>{'>>'}</Button>}\n    </Style>\n  )\n}\n\nconst Style = styled.div`\n  display: flex;\n  margin-top: 8px;\n  justify-content: flex-end;\n  > span {\n    ${button}\n    border-radius: 4px;\n    margin: 0 2px;\n    color: #937caf;\n    border-color: #937caf;\n    &:hover {\n      color: #937caf;\n      border-color: #937caf;\n    }\n  }\n`\n\nexport default Pagination\n"],"sourceRoot":""}